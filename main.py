# -*- coding: utf-8 -*-
"""
Created on Tue Apr 17 10:35:04 2018

@author: bickels
"""

import os
import sys
import subprocess
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# %%

def run(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=False)
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print
            output.strip()
    rc = process.poll()
    return rc


# %% DEFINE PATH TO EXPERIMENT
# path = r'/Users/jingyuwang/Desktop/ETH 论文/Results/Nutrients'
path = r'/Users/jingyuwang/Desktop/Hydration/day2'

# %% RUN SCRIPT ON FILES & COLLECT OUTPUT
ceramics = [f for f in os.listdir(path) if not os.path.isfile(os.path.join(path, f))]
res = []
for ceramic in ceramics:
    fpath = os.path.join(path, ceramic)
    files = [f.split('.')[0] for f in os.listdir(fpath) if
             os.path.isfile(os.path.join(fpath, f)) and os.path.join(fpath, f).endswith('.tif')]
    ftmp = [f.split('_')[:2] for f in files]
    fname = ['_'.join(f) for f in np.unique(ftmp, axis=0)]
    psm, info = ceramic.split('(')
    psi, nut = info.split(' ')
    print
    ceramic
    for f in fname:
        if f not in ['', 'Thumbs', 'detected_cells', 'gfp_and', 'histogram']:  # file names to ignore
            print
            f
            info, repl = f.split('_')
            grain, mag = info.split(' ')
            cmd = [sys.executable, '-u', 'iman03.py', fpath, f, mag]
            run(cmd)
            # load file generated by script called by 'run(cmd)'
            try:
                dat = np.load(os.path.join(fpath, f + r'_out.npz'),
                              mmap_mode='r')  # this file also contains images and can be accessed
                fres = pd.DataFrame({'psm': [psm],
                                     'psi': [psi],
                                     'nutrients': [nut[:-1]],
                                     'replicate': [repl],
                                     'grain size': [grain],
                                     'magnification': [mag],
                                     'dxy': dat['dxy'],
                                     'davg_k1': [np.mean(dat['dist'][:, 1])],
                                     'dstd_k1': [np.std(dat['dist'][:, 1])],
                                     'ncells': dat['ncells'],
                                     'area': dat['area'],
                                     'mean size': [np.mean(2 ** 0.5 * dat['sigma'] * dat['dxy'])],
                                     'std size': [np.std(2 ** 0.5 * dat['sigma'] * dat['dxy'])],
                                     'filename': [f]
                                     })
                res.append(fres)
            except:
                print
                'output file not found'
#            break #uncomment if you want to analyse only the first file for every ceramic
#    break #uncomment if you want to analyse only the first ceramic

# %% COMPILE & SAVE FINAL RESULTS
res = pd.concat(res)
res = res.reset_index()

res['cell density'] = res['ncells'] / res['area']

res.to_excel(os.path.join(path, 'results.xlsx'))

# %% PLOT DATA
sns.set_style("ticks")
plot = sns.factorplot(x='psi', y='cell density', hue='nutrients', row='magnification', data=res)
plt.show()
plot.savefig(os.path.join(path, 'magnification.png'))
plot = sns.boxplot(x='psi', y='cell density', hue='magnification', data=res)
plt.show()
plot = sns.boxplot(x='psi', y='cell density', hue='grain size', data=res)
# plot.savefig(os.path.join(path, 'hydration.png'))
plt.show()
plot = sns.factorplot(x='psi', y='davg_k1', hue='grain size', data=res)
plt.show()
plot.savefig(os.path.join(path, 'distance.png'))
